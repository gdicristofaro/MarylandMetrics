{"version":3,"sources":["dataimport.ts","Table.tsx","Chart.tsx","App.tsx","Error.tsx","serviceWorker.ts","index.tsx"],"names":["DATE_FIELD","STMA","STMA_DELTA","STMA_PERC_DELTA","DERIVED_COLUMNS","percRound","num","Math","round","row","total","delta","moment","Date","format","rowPrev","toString","COLUMN_FIELDS","percCols","props","cols","rows","data","Paper","TableContainer","style","maxHeight","Table","stickyHeader","aria-label","size","TableHead","TableRow","map","column","TableCell","key","align","TableBody","hover","role","tabIndex","code","perc","value","indexOf","lineColor","fillColor","title","dataProps","labels","d","date","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","height","marginBottom","options","responsive","maintainAspectRatio","convertArrayToCSV","require","download","color","Button","onClick","Box","marginTop","col","idx","Chart","length","r","message","Boolean","window","location","hostname","match","fetch","then","response","json","records","record","toRet","field","undefined","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","err","log","Error"],"mappings":"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","file":"static/js/main.390916a9.chunk.js","sourcesContent":["import moment from 'moment';\n\nconst DATA_URL = \"https://services.arcgis.com/njFNhDsUCentVYJW/arcgis/rest/services/MASTER_CaseTracker_1/FeatureServer/0/query?f=json&where=1%3D1&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=ReportDate%20asc&resultOffset=0&resultRecordCount=2000&cacheHint=true\"\nexport const DATE_FIELD = \"ReportDate\";\n\nexport const STMA = 'STMA';\nexport const STMA_DELTA = 'STMA_DELTA';\nexport const STMA_PERC_DELTA = 'STMA_PERC_DELTA';\nexport const PERC_DELTA = \"PercentDelta\";\n\nlet DERIVED_COLUMNS : {[key: string]: ((row: any, rowPrev?: any) => any)} = {};\n\nconst percRound = (num: number) => Math.round(num * 1000) / 1000;\n\nDERIVED_COLUMNS[PERC_DELTA] = (row: any) => {\n    const total: number = row[\"TotalCases\"];\n    const delta: number = row[\"CaseDelta\"];\n\n    if (!total)\n        return '';\n\n    const percDelta = delta / total;\n    return percRound(percDelta);\n};\n\n\nDERIVED_COLUMNS[DATE_FIELD] = (row: any) => {\n    return moment(new Date(row[DATE_FIELD])).format(\"MM/DD/YYYY\");\n}\n\n\n\nDERIVED_COLUMNS[STMA_DELTA] = (row: any, rowPrev: any) => {\n    if (rowPrev && rowPrev[STMA]) {\n        return (row[STMA] - rowPrev[STMA]).toString();\n    }\n    else {\n        return '';\n    }\n}\n\nDERIVED_COLUMNS[STMA_PERC_DELTA] = (row: any, rowPrev: any) => {\n    if (rowPrev && rowPrev[STMA]) {\n        return percRound((row[STMA] - rowPrev[STMA]) / row[STMA]);\n    }\n    else {\n        return '';\n    }\n}\n\n\nexport const COLUMN_FIELDS = [\n    DATE_FIELD,\n    \"TotalCases\",\n    \"CaseDelta\",\n    \"PercentDelta\",\n    STMA,\n    STMA_DELTA,\n    STMA_PERC_DELTA,\n    \"ALLE\",\n    \"ANNE\",\n    \"BALT\",\n    \"BCITY\",\n    \"CALV\",\n    \"CARO\",\n    \"CARR\",\n    \"CECI\",\n    \"CHAR\",\n    \"DORC\",\n    \"FRED\",\n    \"GARR\",\n    \"HARF\",\n    \"HOWA\",\n    \"KENT\",\n    \"MONT\",\n    \"PRIN\",\n    \"QUEE\",\n    \"SOME\",\n    \"TALB\",\n    \"WASH\",\n    \"WICO\",\n    \"WORC\",\n    \"deaths\",\n    \"deathALLE\",\n    \"deathANNE\",\n    \"deathBALT\",\n    \"deathBCITY\",\n    \"deathCALV\",\n    \"deathCARO\",\n    \"deathCARR\",\n    \"deathCECI\",\n    \"deathCHAR\",\n    \"deathDORC\",\n    \"deathFRED\",\n    \"deathGARR\",\n    \"deathHARF\",\n    \"deathHOWA\",\n    \"deathKENT\",\n    \"deathMONT\",\n    \"deathPRIN\",\n    \"deathQUEE\",\n    \"deathSTMA\",\n    \"deathSOME\",\n    \"deathTALB\",\n    \"deathWASH\",\n    \"deathWICO\",\n    \"deathWORC\",\n];\n\nexport default () => {\n    return fetch(DATA_URL)\n        .then((response) => {\n            return response.json();\n        })\n        .then((data) => {\n            let records = data['features'].map((r: any) => r['attributes']);\n            return records.map((record: any, idx: number) => {\n                let toRet: any = {};\n                for (let field of COLUMN_FIELDS) {\n                    if (DERIVED_COLUMNS[field]) {\n                        toRet[field] = DERIVED_COLUMNS[field](record, (idx > 0) ? records[idx-1] : undefined);\n                    }\n                    else {\n                        toRet[field] = record[field];\n                    }\n                }\n\n                return toRet;\n            })\n        });\n}\n\n","import React from 'react';\nimport {DATE_FIELD, COLUMN_FIELDS, PERC_DELTA, STMA_PERC_DELTA} from './dataimport';\n\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nconst formatPerc = (perc: number) => perc ? (Math.round(perc * 1000) / 10) + '%' : '';\n\nconst percCols = [\n    PERC_DELTA,\n    STMA_PERC_DELTA\n];\n\nexport default (props: {data: any[]}) => {\n  let cols = [DATE_FIELD, ...COLUMN_FIELDS];\n  let rows = props.data;\n  return (\n    <Paper>\n    <TableContainer style={{maxHeight: 600}}>\n      <Table stickyHeader aria-label=\"sticky table\" size=\"small\">\n        <TableHead>\n          <TableRow>\n            {cols.map((column) => (\n              <TableCell\n                key={column}\n                align='left'\n              >\n                {column}\n              </TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => {\n            return (\n              <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\n                {cols.map((column) => {\n                  const value = row[column];\n                  return (\n                    <TableCell key={column} align='left'>\n                      {percCols.indexOf(column) >= 0 ? formatPerc(value) : value}\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  </Paper>\n  );\n}","import React from 'react';\nimport { Line } from 'react-chartjs-2';\n\n\n\nexport default (props: {\n    title: string,\n    data: { date: string, value: any }[],\n    lineColor: string,\n    fillColor: string\n}) => {\n\n    const { lineColor, fillColor, title, data } = props;\n\n    const dataProps = {\n        labels: data.map((d) => d.date),\n        datasets: [\n            {\n                label: title,\n                fill: false,\n                lineTension: 0.1,\n                backgroundColor: fillColor,\n                borderColor: lineColor,\n                borderCapStyle: 'butt',\n                borderDash: [],\n                borderDashOffset: 0.0,\n                borderJoinStyle: 'miter',\n                pointBorderColor: lineColor,\n                pointBackgroundColor: '#fff',\n                pointBorderWidth: 1,\n                pointHoverRadius: 5,\n                pointHoverBackgroundColor: lineColor,\n                pointHoverBorderColor: lineColor,\n                pointHoverBorderWidth: 2,\n                pointRadius: 1,\n                pointHitRadius: 10,\n                data: data.map((d) => d.value || 0)\n            }\n        ],\n    };\n    \n    const options = {\n        responsive: true,\n        maintainAspectRatio: false,\n    }\n\n\n    return (\n        <div style={{ height: 300, marginBottom: 100 }}>\n            <Line data={dataProps} options={options} />\n        </div>\n    )\n}","import React from 'react';\nimport Table from './Table';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Chart from './Chart';\nimport { DATE_FIELD, STMA, STMA_DELTA, STMA_PERC_DELTA } from './dataimport';\nconst {convertArrayToCSV} = require('convert-array-to-csv');\nconst download = require('downloadjs');\n\n\nexport default (props: { data: any[] }) => {\n  const color = ['52, 163, 73', '51, 72, 176', '145, 36, 36'];\n  return (\n    <>\n      <Table {...props} />\n      <Button onClick={() => download(convertArrayToCSV(props.data), \"data.csv\", \"text/csv\")}>Download CSV</Button>\n      <Box marginTop={5}>\n        {[\"TotalCases\", \"CaseDelta\", \"PercentDelta\", STMA, STMA_DELTA, STMA_PERC_DELTA]\n          .map((col, idx) => {\n            return (<Chart\n              fillColor={`rgb(${color[idx % color.length]}, 1)`}\n              lineColor={`rgb(${color[idx % color.length]}, 0.4)`}\n              title={col}\n              key={col}\n              data={props.data.map((r) => ({ date: r[DATE_FIELD], value: r[col] }))}\n            />)\n          })}\n      </Box>\n    </>\n  );\n}","import React from 'react';\n\nexport default (props: {message: string}) => {\n    return <h1>ERROR: {props.message}</h1>\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Error from './Error';\nimport * as serviceWorker from './serviceWorker';\nimport dataimport from './dataimport';\n\ndataimport().then(data => {\n    ReactDOM.render(\n      <React.StrictMode>\n        <App data={data} />\n      </React.StrictMode>,\n      document.getElementById('root')\n    );\n\n\n  // If you want your app to work offline and load faster, you can change\n  // unregister() to register() below. Note this comes with some pitfalls.\n  // Learn more about service workers: https://bit.ly/CRA-PWA\n  serviceWorker.unregister();\n})\n  .catch((err) => {\n    console.log(\"ERROR:\", err);\n    ReactDOM.render(\n      <React.StrictMode>\n      <Error message={err} />\n    </React.StrictMode>,\n    document.getElementById('root')\n    )\n  })\n\n"],"sourceRoot":""}