{"version":3,"sources":["dataimport.ts","App.tsx","Error.tsx","serviceWorker.ts","index.tsx"],"names":["DATE_FIELD","COLUMN_FIELDS","props","cols","className","map","col","data","row","message","Boolean","window","location","hostname","match","fetch","then","response","json","recordItem","record","toRet","dt","Date","getMonth","getDate","getFullYear","field","console","log","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","err","Error"],"mappings":"8OACaA,EAAa,aACbC,EAAgB,CACzB,aACA,OACA,OACA,OACA,QACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,SACA,YACA,YACA,YACA,aACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,aC/CW,WAACC,GACd,IAAIC,EAAI,CAAIH,GAAJ,mBAAmBC,IAC3B,OAAQ,6BACN,2BAAOG,UAAU,uBACf,+BACE,4BACGD,EAAKE,KAAI,SAACC,GAAD,OAAS,4BAAKA,QAG5B,+BACGJ,EAAMK,KAAKF,KAAI,SAACG,GAAD,OACd,4BACGL,EAAKE,KAAI,SAACC,GAAD,OAAU,4BAAME,EAAIF,IAAQ,eCfnC,WAACJ,GACZ,OAAO,sCAAYA,EAAMO,UCSTC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MHsCKC,MAxDM,4RAyDRC,MAAK,SAACC,GACH,OAAOA,EAASC,UAEnBF,MAAK,SAACT,GAEH,OADcA,EAAI,SACHF,KAAI,SAACc,GAChB,IAAIC,EAASD,EAAU,WACnBE,EAAa,GACbC,EAAK,IAAIC,KAAKH,EAAOpB,IACzBqB,EAAMrB,GAAN,UAAuBsB,EAAGE,WAAa,EAAvC,YAA4CF,EAAGG,UAAY,EAA3D,YAAgEH,EAAGI,eAJ/B,oBAKlBzB,GALkB,IAKpC,gCAAS0B,EAAT,QACIN,EAAMM,GAASP,EAAOO,IANU,8BASpC,OADAC,QAAQC,IAAIR,GACLA,QI9DVL,MAAK,SAAAT,GACduB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKzB,KAAMA,KAEb0B,SAASC,eAAe,SD6HxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLb,QAAQa,MAAMA,EAAMhC,eC1HzB+B,OAAM,SAACE,GACNZ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAACW,EAAD,CAAOlC,QAASiC,KAElBT,SAASC,eAAe,a","file":"static/js/main.8e4604c9.chunk.js","sourcesContent":["const DATA_URL = \"https://services.arcgis.com/njFNhDsUCentVYJW/arcgis/rest/services/MASTER_CaseTracker_1/FeatureServer/0/query?f=json&where=1%3D1&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=ReportDate%20asc&resultOffset=0&resultRecordCount=2000&cacheHint=true\"\nexport const DATE_FIELD = \"ReportDate\";\nexport const COLUMN_FIELDS = [\n    \"TotalCases\",\n    \"ALLE\",\n    \"ANNE\",\n    \"BALT\",\n    \"BCITY\",\n    \"CALV\",\n    \"CARO\",\n    \"CARR\",\n    \"CECI\",\n    \"CHAR\",\n    \"DORC\",\n    \"FRED\",\n    \"GARR\",\n    \"HARF\",\n    \"HOWA\",\n    \"KENT\",\n    \"MONT\",\n    \"PRIN\",\n    \"QUEE\",\n    \"SOME\",\n    \"STMA\",\n    \"TALB\",\n    \"WASH\",\n    \"WICO\",\n    \"WORC\",\n    \"deaths\",\n    \"deathALLE\",\n    \"deathANNE\",\n    \"deathBALT\",\n    \"deathBCITY\",\n    \"deathCALV\",\n    \"deathCARO\",\n    \"deathCARR\",\n    \"deathCECI\",\n    \"deathCHAR\",\n    \"deathDORC\",\n    \"deathFRED\",\n    \"deathGARR\",\n    \"deathHARF\",\n    \"deathHOWA\",\n    \"deathKENT\",\n    \"deathMONT\",\n    \"deathPRIN\",\n    \"deathQUEE\",\n    \"deathSTMA\",\n    \"deathSOME\",\n    \"deathTALB\",\n    \"deathWASH\",\n    \"deathWICO\",\n    \"deathWORC\",\n];\n\nexport default () => {\n    return fetch(DATA_URL)\n        .then((response) => {\n            return response.json();\n        })\n        .then((data) => {\n            let records = data['features'];\n            return records.map((recordItem: any) => {\n                let record = recordItem['attributes'];\n                let toRet: any = {};\n                let dt = new Date(record[DATE_FIELD]);\n                toRet[DATE_FIELD] = `${dt.getMonth() + 1}/${dt.getDate() + 1}/${dt.getFullYear()}`;\n                for (let field of COLUMN_FIELDS)\n                    toRet[field] = record[field];\n\n                console.log(toRet);\n                return toRet;\n            })\n        });\n}\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {DATE_FIELD, COLUMN_FIELDS} from './dataimport';\n\nexport default (props: {data: any[]}) => {\n  let cols = [DATE_FIELD, ...COLUMN_FIELDS];\n  return (<div>\n    <table className=\"table table-striped\">\n      <thead>\n        <tr>\n          {cols.map((col) => <th>{col}</th>)}\n        </tr>\n      </thead>\n      <tbody>\n        {props.data.map((row) => (\n          <tr>\n            {cols.map((col) => (<td>{(row[col] || \"\")}</td>))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>)\n}","import React from 'react';\n\nexport default (props: {message: string}) => {\n    return <h1>ERROR: {props.message}</h1>\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Error from './Error';\nimport * as serviceWorker from './serviceWorker';\nimport dataimport from './dataimport';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\ndataimport().then(data => {\n    ReactDOM.render(\n      <React.StrictMode>\n        <App data={data} />\n      </React.StrictMode>,\n      document.getElementById('root')\n    );\n\n\n  // If you want your app to work offline and load faster, you can change\n  // unregister() to register() below. Note this comes with some pitfalls.\n  // Learn more about service workers: https://bit.ly/CRA-PWA\n  serviceWorker.unregister();\n})\n  .catch((err) => {\n    ReactDOM.render(\n      <React.StrictMode>\n      <Error message={err} />\n    </React.StrictMode>,\n    document.getElementById('root')\n    )\n  })\n\n"],"sourceRoot":""}