{"version":3,"sources":["dataimport.ts","Table.tsx","Chart.tsx","dataprocessing.ts","App.tsx","Error.tsx","serviceWorker.ts","index.tsx"],"names":["STMA","STMA_DELTA","STMA_PERC_DELTA","DERIVED_COLUMNS","percRound","num","Math","round","row","total","delta","moment","Date","format","rowPrev","toString","COUNTY_COLUMNS","COLUMN_FIELDS","percCols","descendingComparator","a","b","orderBy","props","React","useState","order","setOrder","setOrderBy","createSortHandler","property","event","handleRequestSort","cols","rows","data","Paper","TableContainer","style","maxHeight","Table","stickyHeader","aria-label","size","TableHead","TableRow","map","column","TableCell","key","align","TableSortLabel","active","direction","onClick","display","TableBody","array","comparator","stabilizedThis","el","index","sort","stableSort","getComparator","hover","role","tabIndex","code","perc","value","indexOf","lines","title","dateLabels","logarithmic","displayLegend","height","dataProps","labels","datasets","line","label","fill","fillColor","lineTension","backgroundColor","borderColor","lineColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","values","options","text","responsive","maintainAspectRatio","scales","xAxes","yAxes","type","undefined","legend","position","marginBottom","avg","nums","reduce","length","arrAvg","window","intWindow","floor","range","below","above","numsLen","idx","slice","max","min","convertArrayToCSV","require","download","palette","dc","default","count","c","color","Box","padding","Button","col","Chart","r","county","chart","message","Boolean","location","hostname","match","fetch","then","response","json","records","record","toRet","field","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","err","log","Error"],"mappings":"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","file":"static/js/main.ea269a55.chunk.js","sourcesContent":["import moment from 'moment';\n\nconst DATA_URL = \"https://services.arcgis.com/njFNhDsUCentVYJW/arcgis/rest/services/MASTER_CaseTracker_1/FeatureServer/0/query?f=json&where=1%3D1&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=ReportDate%20asc&resultOffset=0&resultRecordCount=2000&cacheHint=true\"\nexport const DATE_FIELD = \"ReportDate\";\n\nexport const STMA = 'STMA';\nexport const STMA_DELTA = 'STMA_DELTA';\nexport const STMA_PERC_DELTA = 'STMA_PERC_DELTA';\nexport const PERC_DELTA = \"PercentDelta\";\n\nlet DERIVED_COLUMNS : {[key: string]: ((row: any, rowPrev?: any) => any)} = {};\n\nconst percRound = (num: number) => Math.round(num * 1000) / 1000;\n\nDERIVED_COLUMNS[PERC_DELTA] = (row: any) => {\n    const total: number = row[\"TotalCases\"];\n    const delta: number = row[\"CaseDelta\"];\n\n    if (!total)\n        return '';\n\n    const percDelta = delta / total;\n    return percRound(percDelta);\n};\n\n\nDERIVED_COLUMNS[DATE_FIELD] = (row: any) => {\n    return moment(new Date(row[DATE_FIELD])).format(\"MM/DD/YYYY\");\n}\n\n\n\nDERIVED_COLUMNS[STMA_DELTA] = (row: any, rowPrev: any) => {\n    if (rowPrev && rowPrev[STMA]) {\n        return (row[STMA] - rowPrev[STMA]).toString();\n    }\n    else {\n        return '';\n    }\n}\n\nDERIVED_COLUMNS[STMA_PERC_DELTA] = (row: any, rowPrev: any) => {\n    if (rowPrev && rowPrev[STMA]) {\n        return percRound((row[STMA] - rowPrev[STMA]) / row[STMA]);\n    }\n    else {\n        return '';\n    }\n}\n\nexport const COUNTY_COLUMNS = [\n    \"ALLE\",\n    \"ANNE\",\n    \"BALT\",\n    \"BCITY\",\n    \"CALV\",\n    \"CARO\",\n    \"CARR\",\n    \"CECI\",\n    \"CHAR\",\n    \"DORC\",\n    \"FRED\",\n    \"GARR\",\n    \"HARF\",\n    \"HOWA\",\n    \"KENT\",\n    \"MONT\",\n    \"PRIN\",\n    \"QUEE\",\n    \"SOME\",\n    \"STMA\",\n    \"TALB\",\n    \"WASH\",\n    \"WICO\",\n    \"WORC\",\n]\n\n\nexport const COLUMN_FIELDS = [\n    DATE_FIELD,\n    \"TotalCases\",\n    \"CaseDelta\",\n    \"PercentDelta\",\n    STMA,\n    STMA_DELTA,\n    STMA_PERC_DELTA,\n    \"ALLE\",\n    \"ANNE\",\n    \"BALT\",\n    \"BCITY\",\n    \"CALV\",\n    \"CARO\",\n    \"CARR\",\n    \"CECI\",\n    \"CHAR\",\n    \"DORC\",\n    \"FRED\",\n    \"GARR\",\n    \"HARF\",\n    \"HOWA\",\n    \"KENT\",\n    \"MONT\",\n    \"PRIN\",\n    \"QUEE\",\n    \"SOME\",\n    \"STMA\",\n    \"TALB\",\n    \"WASH\",\n    \"WICO\",\n    \"WORC\",\n    \"deaths\",\n    \"deathALLE\",\n    \"deathANNE\",\n    \"deathBALT\",\n    \"deathBCITY\",\n    \"deathCALV\",\n    \"deathCARO\",\n    \"deathCARR\",\n    \"deathCECI\",\n    \"deathCHAR\",\n    \"deathDORC\",\n    \"deathFRED\",\n    \"deathGARR\",\n    \"deathHARF\",\n    \"deathHOWA\",\n    \"deathKENT\",\n    \"deathMONT\",\n    \"deathPRIN\",\n    \"deathQUEE\",\n    \"deathSTMA\",\n    \"deathSOME\",\n    \"deathTALB\",\n    \"deathWASH\",\n    \"deathWICO\",\n    \"deathWORC\",\n];\n\nexport default () => {\n    return fetch(DATA_URL)\n        .then((response) => {\n            return response.json();\n        })\n        .then((data) => {\n            let records = data['features'].map((r: any) => r['attributes']);\n            return records.map((record: any, idx: number) => {\n                let toRet: any = {};\n                for (let field of COLUMN_FIELDS) {\n                    if (DERIVED_COLUMNS[field]) {\n                        toRet[field] = DERIVED_COLUMNS[field](record, (idx > 0) ? records[idx-1] : undefined);\n                    }\n                    else {\n                        toRet[field] = record[field];\n                    }\n                }\n\n                return toRet;\n            })\n        });\n}\n\n","import React from 'react';\nimport {DATE_FIELD, COLUMN_FIELDS, PERC_DELTA, STMA_PERC_DELTA} from './dataimport';\n\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\n\nconst formatPerc = (perc: number) => perc ? (Math.round(perc * 1000) / 10) + '%' : '';\n\nconst percCols = [\n    PERC_DELTA,\n    STMA_PERC_DELTA\n];\n\ntype Order = 'asc' | 'desc';\n\nfunction descendingComparator<T>(a: any, b: any, orderBy: string) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(\n  order: Order,\n  orderBy: string,\n): (a: any, b: any) => number {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {\n  const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nexport default (props: {data: any[]}) => {\n  const [order, setOrder] = React.useState<Order>('asc');\n  const [orderBy, setOrderBy] = React.useState<string>(DATE_FIELD);\n\n  const handleRequestSort = (event: React.MouseEvent<unknown>, property: string) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const createSortHandler = (property: string) => (event: React.MouseEvent<unknown>) => {\n    handleRequestSort(event, property);\n  };\n\n  let cols = COLUMN_FIELDS;\n  let rows = props.data;\n  return (\n    <Paper>\n    <TableContainer style={{maxHeight: \"calc(95vh - 50px)\"}}>\n      <Table stickyHeader aria-label=\"sticky table\" size=\"small\">\n        <TableHead>\n          <TableRow>\n            {cols.map((column) => (\n              <TableCell\n                key={column}\n                align='left'\n              >\n                <TableSortLabel\n                  active={orderBy === column}\n                  direction={orderBy === column ? order : 'asc'}\n                  onClick={createSortHandler(column)}\n                >\n                  {column}\n                  {orderBy === column ? (\n                    //  className={classes.visuallyHidden}\n                    <span style={{display: 'none'}}>\n                      {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                    </span>\n                  ) : null}\n                </TableSortLabel>\n              </TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {stableSort(rows, getComparator(order, orderBy))\n          .map((row) => {\n            return (\n              <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\n                {cols.map((column) => {\n                  const value = row[column];\n                  return (\n                    <TableCell key={column} align='left'>\n                      {percCols.indexOf(column) >= 0 ? formatPerc(value) : value}\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  </Paper>\n  );\n}","import React from 'react';\nimport { Line } from 'react-chartjs-2';\n\nexport interface LineData {\n    title: string,\n    values: number[],\n    lineColor: string,\n    fillColor?: string\n}\n\nexport default (props: {\n    title: string,\n    height?: number | string,\n    displayLegend: boolean,\n    dateLabels: string[],\n    logarithmic: boolean,\n    lines: LineData[]\n}) => {\n\n    const { lines, title, dateLabels, logarithmic, displayLegend, height } = props;\n\n    const dataProps = {\n        labels: dateLabels,\n        datasets: lines.map((line) => ({\n            label: line.title,\n            fill: line.fillColor ? true : false,\n            lineTension: 0.1,\n            backgroundColor: line.fillColor,\n            borderColor: line.lineColor,\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: line.lineColor,\n            pointBackgroundColor: '#fff',\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: line.lineColor,\n            pointHoverBorderColor: line.lineColor,\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: line.values\n        })),\n    };\n    \n    const options = {\n        title: {\n            text: title,\n            display: true\n        },\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n            xAxes: [{\n                display: true,\n            }],\n            yAxes: [{\n                display: true,\n                type: logarithmic ? 'logarithmic' : undefined,\n            }]\n        },\n        legend: {\n            display: displayLegend,\n            position: 'bottom'\n        }\n    }\n\n\n    return (\n        <div style={{ height: height || 300, marginBottom: 0 }}>\n            <Line data={dataProps} options={options} />\n        </div>\n    )\n}","export const avg = (nums: number[]) => {\n    if (!nums)\n        return 0;\n\n    let sum = nums.reduce((a,b) => a+b, 0);\n    return sum / nums.length;\n}\n\nexport const arrAvg = (nums: number[], window: number = 5) => {\n    const intWindow = Math.floor(window);\n    const range = intWindow;\n    const below = Math.floor(range / 2);\n    const above = range - below;\n\n    const numsLen = nums.length;\n\n    return nums.map((num, idx) => \n        avg(nums.slice(\n            Math.max(0, idx - below), \n            Math.min(numsLen, idx + above)))\n    );\n}","import React from 'react';\nimport Table from './Table';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Chart from './Chart';\nimport { DATE_FIELD, STMA, STMA_DELTA, STMA_PERC_DELTA, COUNTY_COLUMNS } from './dataimport';\nimport { arrAvg } from './dataprocessing';\nconst {convertArrayToCSV} = require('convert-array-to-csv');\nconst download = require('downloadjs');\nconst dc = require('distinct-colors').default;\n\nconst palette = dc({count: 30}).map((c: any) => c.toString());\n\nexport default (props: { data: any[] }) => {\n  const color = ['52, 163, 73', '51, 72, 176', '145, 36, 36'];\n  return (\n    <>\n      <Box padding=\"1rem\">\n        <Table {...props} />\n        <Button onClick={() => download(convertArrayToCSV(props.data), \"data.csv\", \"text/csv\")}>Download CSV</Button>  \n      </Box>\n        {[\"TotalCases\", \"CaseDelta\", \"PercentDelta\", STMA, STMA_DELTA, STMA_PERC_DELTA]\n          .map((col, idx) => {\n            return (\n              <Box padding=\"1rem\">\n            <Chart\n              displayLegend={false}\n              logarithmic={false}\n              dateLabels={props.data.map(r => r[DATE_FIELD])}\n              lines={[{\n                lineColor: `rgb(${color[idx % color.length]})`,\n                fillColor: `rgb(${color[idx % color.length]}, 0.35)`,\n                title: col,\n                values: props.data.map(r => r[col])\n              }]}\n              title={col}\n              key={col}\n            />\n            </Box>)\n          })}\n          {[{\n            title: 'Cases by County', \n            datasets: COUNTY_COLUMNS.map(county => ({title: county, data: props.data.map(r => r[county])}))\n          },\n          {\n            title: '5-Day Moving Average', \n            datasets: COUNTY_COLUMNS.map(county => ({title: county, data: arrAvg(props.data.map(r => r[county]))}))\n          }]\n            .map((chart) => {\n              return (\n                <Box padding=\"1rem\">\n              <Chart\n                height='90vh'\n                displayLegend={true}\n                logarithmic={true}\n                dateLabels={props.data.map(r => r[DATE_FIELD])}\n                lines={chart.datasets.map((line, idx) => ({\n                  lineColor: palette[idx],\n                  title: line.title,\n                  values: line.data\n                }))}\n                title={chart.title}\n                key={chart.title}\n              />\n              </Box>)\n            })}\n    </>\n  );\n}","import React from 'react';\n\nexport default (props: {message: string}) => {\n    return <h1>ERROR: {props.message}</h1>\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Error from './Error';\nimport * as serviceWorker from './serviceWorker';\nimport dataimport from './dataimport';\n\ndataimport().then(data => {\n    ReactDOM.render(\n      <React.StrictMode>\n        <App data={data} />\n      </React.StrictMode>,\n      document.getElementById('root')\n    );\n\n\n  // If you want your app to work offline and load faster, you can change\n  // unregister() to register() below. Note this comes with some pitfalls.\n  // Learn more about service workers: https://bit.ly/CRA-PWA\n  serviceWorker.unregister();\n})\n  .catch((err) => {\n    console.log(\"ERROR:\", err);\n    ReactDOM.render(\n      <React.StrictMode>\n      <Error message={err} />\n    </React.StrictMode>,\n    document.getElementById('root')\n    )\n  })\n\n"],"sourceRoot":""}